<!doctype html>
<html>
  <head>
    <title>Music Signature</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0">

    <style type="text/css">
      #loader {
        animation: rotate 2s linear infinite;
        height: 50px;
        /*left: 50%;*/
        /*position: absolute;*/
        /*top: 20%;*/
        width: 50px;
        transition: opacity 0.3s ease-out;
      }
      #loader.fadeOut{opacity:0}
      .path {
        stroke-dasharray: 1,200;
        stroke-dashoffset: 0;
        animation: dash 1.5s ease-in-out infinite, color 6s ease-in-out infinite;
        stroke-linecap: round;
        stroke: #3f88f8;
      }

      @keyframes rotate {
        100% {
          transform: rotate(360deg);
        }
      }

      @keyframes dash {
        0% {
          stroke-dasharray: 1,200;
          stroke-dashoffset: 0;
        }
        50% {
          stroke-dasharray: 89,200;
          stroke-dashoffset: -35;
        }
        100% {
          stroke-dasharray: 89,200;
          stroke-dashoffset: -124;
        }
      }
      .container
      {
        display: flex;
        justify-content: center;
        align-items: center;
      }
      #music-signature
      {
        max-height: 100%;
      }

    </style>
  </head>

  <body>
    <div class="container">
      <div id="loader">
        <svg id="circular" height="50" width="50">
          <circle class="path" cx="25" cy="25" r="20" fill="none" stroke-width="3" stroke-miterlimit="10" />
        </svg>
      </div>
      <canvas id="music-signature" width="400" height="400"></canvas>

    </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.bundle.min.js"></script>
    <script>
      var accessToken = <%- JSON.stringify(accessToken) %>
      let userSongs = [];
      let totalSongs = 0;
      let listSongIds = [];
      let analyzedSongs = [];

      const getUserLibrary = (songOffset=0) => {

        let request = new Request(`https://api.spotify.com/v1/me/tracks?limit=50&offset=${songOffset}`, {
          method: 'GET',
          headers: {
            'Authorization': 'Bearer ' + accessToken
          }
        });

        fetch(request).then((response) => {return response.json()}).then((data) => {

            totalSongs = data.total;
            userSongs = userSongs.concat(data.items)

            if (userSongs.length < totalSongs)
            {
              getUserLibrary(songOffset+=50);
            }
            else
            {
              for (let i = 0; i < totalSongs; i++)
              {
                  listSongIds.push(userSongs[i].track.id);
              }
              getAudioFeatures();
            }
        });
      }



      const getAudioFeatures = () => {

        const songIdsToGrab = listSongIds.slice(0,100);

        let request = new Request(`https://api.spotify.com/v1/audio-features?ids=${songIdsToGrab.toString()}`, {
          method: 'GET',
          headers: {
            'Authorization': 'Bearer ' + accessToken
          }
        });

        fetch(request).then((response) => {return response.json()}).then((data) => {
          analyzedSongs = analyzedSongs.concat(data.audio_features);

        if (analyzedSongs.length < totalSongs)
        {
          listSongIds.splice(0,100);
          getAudioFeatures();
        }
        else
        {
          displayData()
        }
      });
      };



      const displayData = () => {

        //songAnalysis contains average of all analyzedSongs properties
        var songAnalysis = analyzedSongs.reduce((acc, song, index) => {
                for (const key in acc)
                {
                  if (typeof acc[key] === 'number')
                  {
                    acc[key] += song[key];
                  }
                  else
                  {
                    acc[key] = null;
                  }
                }
          return acc;
        });

        for (const key in songAnalysis)
        {
          if (typeof songAnalysis[key] === 'number')
          {
            (key === 'duration_ms') ? null :  songAnalysis[key] /= totalSongs;
          }
        }

        songAnalysis.duration_hours = songAnalysis.duration_ms / 3600000;
        console.log(songAnalysis);
        document.getElementById('loader').classList.add('fadeOut');

        var ctx = document.getElementById("music-signature");

        var songData = {
          labels: ["Acousticness", "Danceability", "Energy", "Instrumentalness", "Liveness", "Valence"],
          datasets: [
            {
              label: "Song Analysis",
              backgroundColor: "rgba(147,210,153,0.5)",
              borderColor: "rgba(179,181,198,1)",
              pointBackgroundColor: "rgba(179,181,198,1)",
              pointBorderColor: "#fff",
              pointHoverBackgroundColor: "#fff",
              pointHoverBorderColor: "rgba(179,181,198,1)",
              data: [songAnalysis.acousticness, songAnalysis.danceability, songAnalysis.energy, songAnalysis.instrumentalness, songAnalysis.liveness, songAnalysis.valence]
            }
          ]
        };

        var myRadarChart = new Chart(ctx, {
          type: 'radar',
          data: songData
        });

      }


      getUserLibrary();


    </script>
  </body>
</html>

